<section class="section section-on-the-go section-scenario will-change">
    <span class="gradient-bg gradient-bg-on-the-go"></span>
    <div class="content relative w-[var(--section-content)] mr-auto ml-auto">
        <div class="scenario-intro relative pl-[var(--tile-padding)] pr-[var(--tile-padding)]">
            <h2 class="typography-section-headline headline">
                On the
                <br>
                go.
            </h2>
            <div id="airpods-on-the-go" class="scenario-image parallax-this">
                <picture class="overview-airpods-on-the-go">
                    <source srcset="/images/accessories/go_airpods_small.png" media="(max-width:734px)"> 
                    <source srcset="/images/accessories/go_airpods_medium.png" media="(max-width:1068px)">
                    <source srcset="/images/accessories/go_airpods_large.png" media="(min-width:0px)">
                    <img src="/images/accessories/go_airpods_large.png" alt="AirPods">
                </picture>
            </div>
        </div>
    </div>
</section>
<div class="h-[1000px]"></div>

<script>
import { debounce } from "@/utils/debounce";

    document.addEventListener("DOMContentLoaded", () => {
        interface ExtendedWindow extends Window {
            scrollHandlerActive?: boolean;
        }
        const extWindow = window as ExtendedWindow;

        const parallaxThis = document.querySelector("#airpods-on-the-go") as HTMLElement;

        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // Agregamos el listener solo si no está activo
                    if (!extWindow.scrollHandlerActive) {
                        window.addEventListener('scroll', handleScroll);
                        extWindow.scrollHandlerActive = true;
                    }
                } else {
                    // Eliminamos el listener solo si el elemento está completamente fuera
                    const rect = parallaxThis.getBoundingClientRect();
                    const isCompletelyOutOfView = rect.bottom < 0 || rect.top > window.innerHeight;
                    
                    if (isCompletelyOutOfView && extWindow.scrollHandlerActive) {
                        window.removeEventListener('scroll', handleScroll);
                        extWindow.scrollHandlerActive = false;
                        // Eliminamos la línea que forzaba el reset a 150
                    }
                }
            });
        }, {
            threshold: 0 // Detecta cualquier porción visible
        });
        
        function handleScroll() {
            const viewHeight = window.innerHeight;
            if (!parallaxThis) return;
            
            const rect = parallaxThis.getBoundingClientRect();
            
            const elementCenter = rect.top + rect.height / 2;
            const distanceFromCenter = elementCenter - viewHeight / 2; 
            
            // Ajusta la velocidad y límites del efecto parallax
            const elevationValue = Math.min(
                Math.max(distanceFromCenter / 9, -4), 
                60 * 5
            );
            
            parallaxThis.style.transform = `matrix(1, 0, 0, 1, 0, ${elevationValue})`;
        }

        function setupParallaxEffects() {
            const nowMobile = window.innerWidth < 768;

            // Limpiar cualquier estado anterior
            window.removeEventListener('scroll', handleScroll);
            extWindow.scrollHandlerActive = false;
            
            if (!parallaxThis) return;
            
            // Restaurar estilos
            parallaxThis.style.transform = 'matrix(1, 0, 0, 1, 0, 150)';
            
            // Desconectar cualquier observador anterior
            observer.unobserve(parallaxThis);

            // Si no es móvil, configurar parallax
            if (!nowMobile) {
                observer.observe(parallaxThis);
            }
        }
        // Añadir listener para cambios de tamaño de ventana
        window.addEventListener('resize', debounce(setupParallaxEffects, 250));

        // Configuración inicial
        setupParallaxEffects();
    })
</script>

<style>
    .overview-airpods-on-the-go {
        display: block;
        width: var(--width);
        height: var(--height);
        --width: 327px;
        --height: 335px;
    }

    .section-on-the-go {
        --main-tile-height: 504px;
    }

    .section-on-the-go .scenario-image {
        position: absolute;
        margin-top: 0px;
        z-index: 1;
        right: 26%;
        top: 41%;
    }

    .section-scenario {
        padding: var(--section-padding) 0;
        position: relative;
        border-radius: 60px;
    }

    .section-scenario.will-change .gradient-bg {
        will-change: opacity;
    }

    .section-on-the-go .gradient-bg {
        background-image: linear-gradient(180deg, #fbfbfd, #E795B7 20%, #935893 45%, #224D88);
    }

    .section-scenario .gradient-bg {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-position: bottom;
        background-repeat: no-repeat;
        background-size: 100% var(--bg-height);
        opacity: 0;
        z-index: 0;
        transition: opacity .75s ease-in-out;
        overflow: hidden;
        border-radius: 60px;
    }

    .section-on-the-go .headline {
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        background-image: linear-gradient(45deg, #224D88 32%, #935893 60%, #E896B8 80%);
        padding: 10px 0 55px;
    }
</style>